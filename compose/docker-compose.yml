version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: minipost_db
    env_file:
      - ./.deploy.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks: [minipost_net]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 30

  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: minipost_app
    env_file:
      - ./.deploy.env
    environment:
      APP_HOST: ${APP_HOST}
      APP_PORT: ${APP_PORT}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES}
      FIRST_SUPERUSER: ${FIRST_SUPERUSER}
      FIRST_SUPERUSER_PASSWORD: ${FIRST_SUPERUSER_PASSWORD}
    command: ["uvicorn","app.main:app","--host","0.0.0.0","--port","8080","--log-level","info","--proxy-headers"]
    ports:
      - "${APP_PORT}:8080"
    depends_on:
      db:
        condition: service_healthy
    networks: [minipost_net]
    restart: unless-stopped

networks:
  minipost_net: {}

volumes:
  db_data: {}
