version: "3.9"
services:
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: minipost-web
    env_file:
      - ../.deploy.env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${APP_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    volumes:
      - ${DATA_ROOT:-/opt/minipost/data}:/data
      - ${LOG_ROOT:-/opt/minipost/logs}:/logs
    restart: unless-stopped
    command: ["/bin/bash","-lc","scripts/entrypoint.sh"]
  postgres:
    image: postgres:16
    container_name: minipost-pg
    environment:
      POSTGRES_DB: ${DB_NAME:-minipost}
      POSTGRES_USER: ${DB_USER:-minipost}
      POSTGRES_PASSWORD: ${DB_PASS:-minipost123}
      TZ: UTC
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-minipost} -d ${DB_NAME:-minipost}"]
      interval: 10s
      timeout: 5s
      retries: 30
    volumes:
      - ${DATA_ROOT:-/opt/minipost/data}/pg:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: minipost-redis
    command: ["redis-server","--appendonly","yes"]
    profiles: ["redis"]
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 3s
      retries: 30
    volumes:
      - ${DATA_ROOT:-/opt/minipost/data}/redis:/data
    restart: unless-stopped
