services:
  db:
    image: postgres:16
    container_name: minipost_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 30
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks: [ minipost_net ]

  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: minipost_web
    env_file: .deploy.env
    environment:
      ENV: ${ENV}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ../:/app
      - minipost_logs:/var/log/minipost
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 30
    ports:
      - "8000:8000"
    ulimits:
      nofile: 65535
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks: [ minipost_net ]

volumes:
  pgdata: {}
  minipost_logs: {}

networks:
  minipost_net: {}
