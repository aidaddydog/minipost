# deploy/docker-compose.yml
# 说明：统一 Docker 编排，profiles: web, backend, postgres
# 注意：若你已有反向代理（Caddy/Nginx/Traefik），可以把 web 的 8000:8000 暴露去掉，改走内网。

services:
  db:
    image: postgres:15
    container_name: minipost_db
    environment:
      POSTGRES_USER: minipost
      POSTGRES_PASSWORD: minipost
      POSTGRES_DB: minipost
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U minipost"]
      interval: 5s
      timeout: 3s
      retries: 20
    profiles: ["postgres"]

  backend:
    build:
      context: ../
      dockerfile: app/Dockerfile
    image: minipost-backend
    container_name: minipost_backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_URL: postgresql+psycopg2://minipost:minipost@db:5432/minipost
      APP_ENV: production
      APP_PORT: 8000
    expose:
      - "8000"
    profiles: ["backend"]

  web:
    build:
      context: ../static
      dockerfile: Dockerfile
    image: minipost-web
    container_name: minipost_web
    depends_on:
      - backend
    ports:
      - "8000:8000"     # 对外暴露管理端（如用公网反代，可改为 80/443）
    environment:
      UPSTREAM: http://backend:8000
    profiles: ["web"]

volumes:
  db_data:
