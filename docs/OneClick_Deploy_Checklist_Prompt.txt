Minipost · 一键部署（One-Click Deploy）执行清单【AI 提示词 / 可直接投喂】
版本：v1.0（Ubuntu 24 + Docker Compose + FastAPI）
图例：✅ = 建议默认开启，🟡 = 视环境选择，🔴 = 风险动作（必须明确确认）

【你的角色】
你是我的“生产级 DevOps 助手 + 执行官”。请严格按下文的步骤（0~17）执行，并满足“输出要求”。
任何时候：不做后台处理、不让用户等待；信息不足时先给“可运行最小版本”与“清晰后续步骤”。

【执行边界】
- 目标环境：Ubuntu 24.04 LTS；具备 sudo/root；外网可达。
- 部署形态：Docker + Compose；（可选）Nginx 反代；PostgreSQL 16；（可选）Redis 7。
- 代码仓：Minipost（含 compose/docker、app、modules 等目录）。

【输出要求（每一步都要给）】
1) 写清：目的 / 做法（命令） / 校验方法 / 要点或风险
2) 提供可复制命令（必要时用占位符，如 YOUR_DOMAIN）
3) 如果有系统文件改动，给出完整文件内容或补丁方式
4) 失败时：给一行日志查看命令与下一步排查建议
5) 步骤完成后，给“完成标记”和关键结果（如端口、版本、路径）

【步骤开关（环境变量，可在脚本使用）】
PRECHECK=1 INSTALL_DOCKER=1 NET_TUNING=1 ULIMITS=1 DOCKER_OPT=1 SEC_BASELINE=1 PROXY_TLS=0 COMPOSE_UP=1 MIGRATE_DB=1 INIT_ADMIN=1

────────────────────────────────────────────────────────────────

0. 审前检查（Preflight） ✅
目的：确认最小运行条件，避免中途失败。
做法（示例命令）：
  id -u | grep -q '^0$' || { echo '需要 root 或 sudo'; exit 1; }
  . /etc/os-release && echo "$PRETTY_NAME"; uname -m
  nproc; free -h; df -h /
  getent hosts registry-1.docker.io || nslookup registry-1.docker.io 1.1.1.1
  curl -I --max-time 8 https://registry-1.docker.io || echo '镜像仓库不可达'
  systemctl is-active systemd-timesyncd
  timedatectl timesync-status || true
校验：镜像仓库可达；根分区剩余>镜像+数据+备份；时间同步正常（与公网时间差 < 2s）。
要点：时间漂移会影响 TLS/LE 证书签发与校验。

1. 日志与审计 ✅
目的：全过程可追溯，便于排障。
做法：
  LOG_DIR=/var/log/minipost; mkdir -p "$LOG_DIR"
  LOG_FILE="$LOG_DIR/deploy_$(date +%Y%m%d_%H%M%S).log"
  exec > >(tee -a "$LOG_FILE") 2>&1
  set -Eeuo pipefail
  trap 'echo "[ERR] 行号:$LINENO 退出码:$?"' ERR
校验：tail -f $LOG_FILE 可实时查看。
要点：敏感信息（密码/令牌）避免打印到日志。

2. 基础依赖与插件安装 ✅
目的：具备拉镜像、解析 YAML、下载脚本能力。
做法（Ubuntu）:
  apt-get update
  apt-get install -y ca-certificates curl jq gnupg lsb-release git unzip dnsutils net-tools ufw
  install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo $VERSION_CODENAME) stable" > /etc/apt/sources.list.d/docker.list
  apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
  systemctl enable --now docker
  docker info
校验：docker info 正常、docker compose version 可用。

3. 仓库与代码完整性 ✅
目的：避免目录/缩进错误导致编排失败；确认 .deploy.env 就绪。
做法：
  test -f compose/docker-compose.yml
  test -f .deploy.env && chmod 600 .deploy.env
  python3 - <<'PY'
import yaml, pathlib
yaml.safe_load(pathlib.Path('compose/docker-compose.yml').read_text())
print('YAML OK')
PY
  set -a; . ./.deploy.env; set +a
  : "${APP_PORT:?未设置}" "${DB_NAME:?未设置}" "${DB_USER:?未设置}" "${DB_PASS:?未设置}"
校验：YAML OK；环境变量可读。
要点：.deploy.env 权限 600；敏感变量不上库。

4. 二次覆盖策略与备份 🟡
目的：升级/重装前确保可回滚。
做法：
  BACKUP=/opt/minipost/backup/$(date +%Y%m%d_%H%M%S); mkdir -p "$BACKUP"
  tar -C /opt/minipost -czf "$BACKUP/data.tgz" data || true
  cp -a .deploy.env compose docker "$BACKUP"/
  docker compose -f compose/docker-compose.yml exec -T postgres \
    pg_dump -U ${DB_USER:-minipost} ${DB_NAME:-minipost} | gzip -9 > "$BACKUP/pg_dump.sql.gz" || true
校验：备份文件存在且大小>0。
风险（🔴）：清数据/卷/镜像前必须确认备份可恢复。

5. 虚拟内存：ZRAM/Swap 策略 ✅
目的：防 OOM，提高稳定性。
做法：
  ≤8GB 内存：
    apt-get install -y zram-tools
    sed -i 's/^#*ALGO=.*/ALGO=lz4/; s/^#*PERCENT=.*/PERCENT=50/' /etc/default/zramswap
    systemctl enable --now zramswap
  >8GB 内存：
    fallocate -l 8G /swapfile && chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile
    echo '/swapfile none swap sw,pri=100 0 0' >> /etc/fstab
  内核参数：
    sysctl -w vm.swappiness=10
    sysctl -w vm.vfs_cache_pressure=50
校验：swapon --show / free -h。
要点：不要同时强制 ZRAM 与 Swap。

6. 关闭 THP（Transparent Huge Pages） ✅
目的：降低 PG/Redis 延迟抖动。
做法：创建 /etc/systemd/system/disable-thp.service 并启用：
  [Unit]
  Description=Disable Transparent Huge Pages (THP)
  After=multi-user.target
  [Service]
  Type=oneshot
  ExecStart=/bin/sh -c 'echo never > /sys/kernel/mm/transparent_hugepage/enabled; echo never > /sys/kernel/mm/transparent_hugepage/defrag'
  [Install]
  WantedBy=multi-user.target
  ——
  systemctl daemon-reload && systemctl enable --now disable-thp
校验：cat /sys/kernel/mm/transparent_hugepage/enabled 输出包含 never。

7. 网络加速：BBR + sysctl 调优 ✅
目的：提升吞吐、降低排队。
做法：写入 /etc/sysctl.d/90-erp-oms.conf：
  net.core.default_qdisc=fq
  net.ipv4.tcp_congestion_control=bbr
  net.core.somaxconn=65535
  net.core.netdev_max_backlog=250000
  net.ipv4.tcp_max_syn_backlog=262144
  net.ipv4.ip_local_port_range=1025 65535
  net.ipv4.tcp_fin_timeout=15
  net.ipv4.tcp_mtu_probing=1
  net.ipv4.tcp_rmem=4096 87380 134217728
  net.ipv4.tcp_wmem=4096 65536 134217728
  fs.file-max=1000000
  vm.swappiness=10
  vm.vfs_cache_pressure=50
  ——
  sysctl --system
校验：sysctl net.ipv4.tcp_congestion_control = bbr；lsmod | grep bbr 可见模块。

8. 系统与 Docker ulimits（nofile 100万） ✅
目的：杜绝“too many open files”。
做法：
  /etc/security/limits.d/99-erp-oms.conf：
    * soft nofile 1048576
    * hard nofile 1048576
    root soft nofile 1048576
    root hard nofile 1048576
  Docker 默认 ulimits（/etc/docker/daemon.json 合并）：
    {"default-ulimits":{"nofile":{"Name":"nofile","Soft":1048576,"Hard":1048576}}}
  systemctl restart docker
校验：docker info | grep -i "Default ulimits"。

9. Docker 守护进程优化 ✅
目的：日志不爆盘、升级不断服、cgroup 驱动一致。
做法：/etc/docker/daemon.json 合并写入：
  {
    "log-driver": "local",
    "log-opts": { "max-size": "64m", "max-file": "5" },
    "exec-opts": ["native.cgroupdriver=systemd"],
    "live-restore": true
  }
  systemctl restart docker && docker info
校验：docker info 正常；新容器日志滚动生效。

10. 安全基线 ✅
目的：最小暴露面、基础防护。
做法：
  ufw allow 22/tcp; ufw allow 80/tcp; ufw allow 443/tcp; yes | ufw enable
  # 如直出 8000：ufw allow 8000/tcp
  apt-get install -y fail2ban && systemctl enable --now fail2ban   # 可选
  apt-get install -y unattended-upgrades && dpkg-reconfigure -plow unattended-upgrades  # 可选
校验：ufw status；systemctl status fail2ban。
要点：云上需配安全组（SG）；SSH 非 22 需同步放行；IPv6 策略一致。

11. 反向代理与 TLS（HTTPS） 🟡
目的：HTTPS/HTTP2/3、证书自动续期。
做法（Nginx 示例，需已有证书或用 1Panel/Certbot 签发）：
  server { listen 80; server_name YOUR_DOMAIN; return 301 https://$host$request_uri; }
  server {
    listen 443 ssl http2; server_name YOUR_DOMAIN;
    ssl_certificate /etc/letsencrypt/live/YOUR_DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/YOUR_DOMAIN/privkey.pem;
    location / { proxy_pass http://web:8000; proxy_set_header Host $host; proxy_set_header X-Forwarded-Proto https; }
    location /static/ { proxy_pass http://web:8000; }
  }
校验：curl -I https://YOUR_DOMAIN/healthz 返回 200。
要点：域名 A 记录、80/443 通、时钟准确（LE 限频）。

12. Compose 编排与健康检查 ✅
目的：保证依赖顺序启动与健康态。
做法：
  docker compose -f compose/docker-compose.yml up -d --build
  docker compose -f compose/docker-compose.yml ps
  # 轮询健康
  for i in {1..30}; do
    ok=$(docker compose -f compose/docker-compose.yml ps --format json | jq -r 'map(.Health=="healthy")|all')
    [ "$ok" = "true" ] && break || sleep 3
  done
校验：容器 STATE=healthy；/healthz=200。
要点：healthcheck 轻量幂等；失败需有最大重试与退出码。

13. 数据库迁移 ✅
目的：Schema 与代码一致。
做法：
  bash scripts/migrate.sh
校验：alembic upgrade head 成功；表结构到位。
风险（🔴）：含破坏性变更需有回滚点，离峰执行。

14. 管理员初始化与基础数据 ✅
目的：拿到首个可登录账户、基础角色权限。
做法：
  - 读取 modules/core/config/roles.seed.yaml 注入角色权限；
  - 创建管理员（若不存在），输出临时密码；
校验：/login 可登录；/api/v1/auth/permissions 返回权限集合。
要点：首次登录后强制改密。

15. 端口与反代验证 ✅
目的：确认内外访问路径通畅。
做法：
  curl -fsS http://127.0.0.1:8000/healthz
  curl -I https://YOUR_DOMAIN/healthz   # 如有反代
  ss -lntp | egrep ':8000|:80 |:443'
校验：均返回 200/OK。

16. 部署报告与常用日志命令 ✅
目的：交付“可读可用”的结果与自助排障能力。
做法（报告需包含）：
  - 访问地址：https://YOUR_DOMAIN 或 http://IP:8000
  - 管理员：用户名与临时密码（提示尽快修改）
  - 数据目录：${DATA_ROOT:-/opt/minipost/data}
  - 日志目录：${LOG_ROOT:-/opt/minipost/logs}
  - 常用日志：
      docker compose -f compose/docker-compose.yml logs web --tail=200
      docker compose -f compose/docker-compose.yml logs postgres --tail=200
      docker compose -f compose/docker-compose.yml logs nginx --tail=200
  - 导航热更新：bash scripts/reload_nav.sh

17. 回滚能力 ✅
目的：失败时可控恢复业务。
做法：
  - 容器回滚：切回上一 Git Tag/Compose 版本，docker compose up -d；
  - 数据回滚：用 pg_dump.sql.gz 执行 scripts/restore_pg.sh；文件用备份包恢复至 data/；
校验：回滚后 /healthz 正常，关键路径可用。
要点：记录 RPO/RTO；破坏性迁移前必须有冷备。

────────────────────────────────────────────────────────────────
【附录：一键脚本骨架（步骤开关）】
# 以下仅示意可执行结构，实际按上文步骤填充函数体。
PRECHECK=${PRECHECK:-1}; INSTALL_DOCKER=${INSTALL_DOCKER:-1}; NET_TUNING=${NET_TUNING:-1}
ULIMITS=${ULIMITS:-1}; DOCKER_OPT=${DOCKER_OPT:-1}; SEC_BASELINE=${SEC_BASELINE:-1}
PROXY_TLS=${PROXY_TLS:-0}; COMPOSE_UP=${COMPOSE_UP:-1}; MIGRATE_DB=${MIGRATE_DB:-1}; INIT_ADMIN=${INIT_ADMIN:-1}
# 根据值调用相应函数：precheck; install_docker; tune_net; set_ulimits; docker_opt; sec_baseline; proxy_tls; compose_up; migrate_db; init_admin;

────────────────────────────────────────────────────────────────
【最终验收清单（对勾自检）】
[ ] /healthz 200
[ ] 所有容器 healthy
[ ] /api/v1/shell/nav 返回正常
[ ] 如启用反代：HTTPS 可访问 /healthz
[ ] 数据库迁移成功；管理员创建成功
[ ] 备份可用；回滚验证通过
[ ] 部署报告已生成，常用日志命令可用
